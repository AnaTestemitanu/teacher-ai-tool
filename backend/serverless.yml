org: gamersafer
app: gs-tracking
service: gs-tracking
frameworkVersion: '3'
package:
  individually: true
  excludeDevDependencies: true
  exclude:
    - "tests/**"
provider:
  name: aws
  profile: ${self:custom.profiles.${sls:stage}}
  runtime: nodejs18.x
  region: us-east-1
  versionFunctions: false
  stage: ${opt:stage, 'local'}
  environment:
    ENV_NAME: ${file(config/env.${opt:stage, 'local'}.json):ENV_NAME}
    AUTH_SECRET_KEY: ${file(config/env.${opt:stage, 'local'}.json):AUTH_SECRET_KEY}
    FINDMCSERVER_EXPORT_DATA_QUEUE: ${file(config/env.${opt:stage, 'local'}.json):FINDMCSERVER_EXPORT_DATA_QUEUE}
    DYNAMO_DB_HOST: ${file(config/env.${opt:stage, 'local'}.json):DYNAMO_DB_HOST}
    DYNAMO_DB_TRACKING_TABLE: ${file(config/env.${opt:stage, 'local'}.json):DYNAMO_DB_TRACKING_TABLE}
    DYNAMO_DB_TOTALS_TABLE: ${file(config/env.${opt:stage, 'local'}.json):DYNAMO_DB_TOTALS_TABLE}
    PS_HOST: ${file(config/env.${opt:stage, 'local'}.json):PS_HOST}
    PS_PORT: ${file(config/env.${opt:stage, 'local'}.json):PS_PORT}
    PS_USER: ${file(config/env.${opt:stage, 'local'}.json):PS_USER}
    PS_PASSWORD: ${file(config/env.${opt:stage, 'local'}.json):PS_PASSWORD}
    PS_DATABASE: ${file(config/env.${opt:stage, 'local'}.json):PS_DATABASE}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:BatchWriteItem
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMO_DB_TRACKING_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMO_DB_TRACKING_TABLE}/index/*
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMO_DB_TOTALS_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMO_DB_TOTALS_TABLE}/index/*
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:DeleteMessage
            - sqs:ReceiveMessage
          Resource: arn:aws:sqs:${self:provider.region}:*:ExportFindMCData
plugins:
  - serverless-plugin-typescript
  - serverless-offline
functions:
  registerEvent:
    handler: app/handler.registerEvent
    name: GamerSafer-Tracking-registerEvent
    description: GS-Tracking - Register an Event
    memorySize: 128
    timeout: 30
    events:
      - http:
          path: /findmcserver/events
          method: post
          cors: true
  sendEventsToQueue:
    handler: app/handler.sendEventsToQueue
    name: GamerSafer-Tracking-sendEventsToQueue
    description: GS-Tracking - Send Events to Queue
    memorySize: 128
    timeout: 30
    events:
      - schedule: cron(0 0-6 1 * ? *)
  exportDataConsumer:
    handler: app/handler.exportDataConsumer
    name: GamerSafer-Tracking-exportDataConsumer
    description: GS-Tracking - Export Data Consumer
    memorySize: 1024
    timeout: 900
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ExportFindMCData
              - Arn
          batchSize: 1
          maximumConcurrency: 2
    vpc:
      securityGroupIds:
        - sg-092ed69d7cbef55e8
      subnetIds:
        - subnet-042d6c61ed0f97fa0
        - subnet-0096287b258f4af9f
resources:
  Resources:
    ExportFindMCData:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: 'ExportFindMCData'
        VisibilityTimeout: 900
custom:
  profiles:
    local: aws-development
    dev: aws-development
    prod: sls-gstracking-backend-prod
